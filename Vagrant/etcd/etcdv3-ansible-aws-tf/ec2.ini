# Paramètres de script d'inventaire externe Ansible EC2
#

[ec2]

# pour parler à une instance privée d'eucalyptus, décommentez ces lignes et modifiez-les, 
# modifiez eucalyptus_host pour qu'il soit le nom d'hôte de votre contrôleur de cloud
#eucalyptus = True
#eucalyptus_host = clc.cloud.domain.org

# Régions AWS vers lesquelles passer des appels. Définissez ceci sur « all » pour envoyer une demande à toutes les régions
# d'AWS et fusionner les résultats ensemble. Vous pouvez également définir ceci sur une liste de régions séparées par des virgules.
# Par exemple. 'us-east-1,us-west-1,us-west-2' et ne fournissent pas
# l'option 'regions_exclude'. S'il est défini sur 'auto', la variable d'environnement AWS_REGION ou 
# AWS_DEFAULT_REGION sera lue pour déterminer la région.
regions = us-west-2
#regions_exclude = us-gov-west-1, cn-north-1

# Lors de la génération d'un inventaire, Ansible doit savoir comment adresser un serveur.
# Chaque instance EC2 est associée à de nombreuses variables. Voici la liste :
#   http://docs.pythonboto.org/en/latest/ref/ec2.html#module-boto.ec2.instance
# Voici 2 variables qui sont utilisées comme adresse d'un serveur :
#   - destination_variable
#   - vpc_destination_variable

# Il s'agit de la variable de destination normale à utiliser. Si vous exécutez Ansible
# depuis l'extérieur d'EC2, alors 'public_dns_name' est le plus logique. Si vous exécutez
# Ansible à partir d'EC2, vous souhaitez peut-être utiliser l'adresse interne
# et devez la définir sur 'private_dns_name'. La clé d'une balise EC2
# peut éventuellement être utilisée ; cependant, les variables d'instance boto sont prioritaires
# en cas de collision.
destination_variable = public_dns_name

# Cela vous permet de remplacer l'inventaire_name par une variable ec2, au lieu
# d'utiliser la destination_variable ci-dessus. L'adressage (alias ansible_ssh_host)
# utilisera toujours destination_variable. Les balises doivent être écrites sous la forme 'tag_TAGNAME'.
#hostname_variable = tag_Name

# Pour un serveur à l'intérieur d'un VPC, l'utilisation de noms DNS peut ne pas avoir de sens. Lorsqu'une instance
# a 'subnet_id' défini, cette variable est utilisée. Si le sous-réseau est public, le définir sur
# 'ip_address' renverra l'adresse IP publique. Pour les instances d'un sous-réseau
# privé, cela doit être défini sur "private_ip_address" et Ansible doit être 
# exécuté à partir d'EC2. La clé d'une balise EC2 peut éventuellement être utilisée ; cependant,
# les variables d'instance boto sont prioritaires en cas de collision.
# AVERTISSEMENT : - les instances qui se trouvent dans le vpc privé, _sans_ adresse IP
# publique ne seront pas répertoriées dans l'inventaire tant que vous n'aurez pas défini :
# vpc_destination_variable = private_ip_address
vpc_destination_variable = ip_address

# Les deux paramètres suivants permettent une dénomination d'hôte flexible et ansible basée
# sur une chaîne au format python et une liste de balises ec2 séparées par des virgules. Notez que:
#
# 1) Si les balises référencées ne sont pas présentes pour certaines instances, des chaînes vides
#    seront remplacées dans la chaîne de format.
# 2) Cela remplace à la fois destination_variable et vpc_destination_variable.
#
#destination_format = {0}.{1}.example.com
#destination_format_tags = Name,environment

# Pour baliser des instances sur EC2 avec les enregistrements de ressources qui pointent vers elles depuis
# Route53, set 'route53' to True.
route53 = False

# Pour utiliser les enregistrements Route53 comme noms d'hôte d'inventaire, décommentez et définissez
# le nom de domaine que vous souhaitez utiliser. Vous devez également avoir 'route53' (ci-dessus)
# défini sur Vrai.
# route53_hostnames = .example.com

# Pour exclure les instances RDS de l'inventaire, décommentez et définissez sur False.
rds = False

# Pour exclure les instances ElastiCache de l'inventaire, décommentez et définissez sur False.
elasticache = False

# De plus, vous pouvez spécifier la liste des zones à exclure de la recherche dans
# 'route53_excluded_zones' sous la forme d'une liste séparée par des virgules.
# route53_excluded_zones = samplezone1.com, samplezone2.com

# Par défaut, seules les instances EC2 à l'état « en cours d'exécution » sont renvoyées. Définissez 
# 'all_instances' sur True pour renvoyer toutes les instances, quel que soit leur état.
all_instances = False

# Par défaut, seules les instances EC2 à l'état « en cours d'exécution » sont renvoyées. Spécifiez
# les états d'instance EC2 à renvoyer sous forme de liste séparée par des virgules. Cette
# option est remplacée lorsque 'all_instances' vaut True.
# instance_states = pending, running, shutting-down, terminated, stopping, stopped

# Par défaut, seules les instances RDS à l'état "disponible" sont renvoyées. Définissez
# 'all_rds_instances' sur True pour renvoyer toutes les instances RDS, quel que soit leur état.
all_rds_instances = False

# Inclure les informations du cluster RDS (Aurora, etc.)
include_rds_clusters = False

# Par défaut, seuls les clusters et les nœuds ElastiCache à l'état « disponible »
# sont renvoyés. Définissez 'all_elasticache_clusters' et/ou 'all_elastic_nodes' 
# sur True pour renvoyer tous les clusters et nœuds ElastiCache, quel que soit leur état.
#
# Notez que all_elasticache_nodes s'applique uniquement aux clusters répertoriés. Cela signifie
# que si vous définissez all_elastic_clusters sur false, aucun nœud ne sera renvoyé
# des clusters indisponibles, quel que soit l'état et ce que vous avez défini
# pour all_elasticache_nodes.
all_elasticache_replication_groups = False
all_elasticache_clusters = False
all_elasticache_nodes = False

# Les appels d'API vers EC2 sont lents. Pour cette raison, nous mettons en cache les résultats d'un appel API.
# Définissez ceci sur le chemin dans lequel vous souhaitez que les fichiers de cache soient écrits. Deux fichiers
# seront écrits dans ce répertoire :
#   - ansible-ec2.cache
#   - ansible-ec2.index
cache_path = ./ec2-tmp

# Le nombre de secondes pendant lesquelles un fichier cache est considéré comme valide.
# Après ce nombre de secondes, un nouvel appel API sera effectué et le fichier cache sera mis à jour.
# Pour désactiver le cache, définissez cette valeur sur 0
cache_max_age = 300

# Organisez les groupes dans une hiérarchie imbriquée au lieu d'un espace de noms plat.
nested_groups = False

# Remplacer - balises lors de la création de groupes pour éviter les problèmes avec ansible
replace_dash_in_groups = True

# Si défini sur true, toute balise de la forme "a,b,c" est développée dans une liste
# et les résultats sont utilisés pour créer des groupes d'inventaire tag_* supplémentaires.
expand_csv_tags = False

# La sortie d'inventaire EC2 peut devenir très importante. Pour gérer sa taille,
# configurer les groupes à créer.
group_by_instance_id = True
group_by_region = True
group_by_availability_zone = True
group_by_aws_account = False
group_by_ami_id = True
group_by_instance_type = True
group_by_instance_state = False
group_by_key_pair = True
group_by_vpc_id = True
group_by_security_group = True
group_by_tag_keys = True
group_by_tag_none = True
group_by_route53_names = True
group_by_rds_engine = True
group_by_rds_parameter_group = True
group_by_elasticache_engine = True
group_by_elasticache_cluster = True
group_by_elasticache_parameter_group = True
group_by_elasticache_replication_group = True

# Si vous souhaitez uniquement inclure les hôtes qui correspondent à une certaine expression régulière
# pattern_include = staging-*

# Si vous souhaitez exclure tous les hôtes qui correspondent à une certaine expression régulière
# pattern_exclude = staging-*

# Les filtres d'instance peuvent être utilisés pour contrôler quelles instances sont récupérées
# pour l'inventaire. Pour la liste complète des filtres possibles, veuillez lire la documentation de l'API EC2 : 
# http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html#query-DescribeInstances-filters
# Les filtres sont la clé/ paires de valeurs séparées par '=', pour répertorier plusieurs filtres, utilisez
# une liste séparée par des virgules. Voir les exemples ci-dessous.

# Si vous souhaitez appliquer plusieurs filtres simultanément, définissez stack_filters sur True.
# Le comportement par défaut consiste à combiner les résultats de tous les filtres. L'empilement
# permet d'utiliser plusieurs conditions pour filtrer, par exemple par
# environnement et type d'hôte
stack_filters = False

# Récupérer uniquement les instances avec (key=value) env=staging tag
#instance_filters = 

# Récupérer uniquement les instances avec la balise role=webservers OR role=dbservers
# instance_filters = tag:role=webservers,tag:role=dbservers

# Récupérer uniquement les instances t1.micro OU les instances avec la balise env=staging
# instance_filters = instance-type=t1.micro,tag:env=staging

# Vous pouvez également utiliser des caractères génériques dans les valeurs de filtre. Vous trouverez ci-dessous
# la liste des instances dont la valeur du nom de balise correspond à des serveurs Web1*
# (ex. webservers15, webservers1a, webservers123 etc)
# instance_filters = tag:Name=webservers1*

# Un rôle IAM peut être assumé, de sorte que toutes les demandes sont exécutées en tant que ce rôle.
# Cela peut être utile pour se connecter entre différents comptes ou pour limiter l'accès à
# l'utilisation
# iam_role = role-arn

# Un profil de configuration boto peut être utilisé pour séparer les informations d'identification,
# voir http://boto.readthedocs.org/en/latest/boto_config_tut.html
# boto_profile = some-boto-profile-name


[credentials]

# Les informations d'identification AWS peuvent éventuellement être spécifiées ici. Les informations d'identification spécifiées
# ici sont ignorées si la variable d'environnement AWS_ACCESS_KEY_ID
# ou AWS_PROFILE est définie, ou si la propriété boto_profile ci-dessus est définie.
#
# Il n'est pas recommandé de fournir les informations d'identification AWS ici, car cela introduit des problèmes
# de sécurité non triviaux. Lorsque vous suivez cette route, assurez-vous de définir 
# correctement les autorisations d'accès pour ce fichier, par ex. gérez-le de la même
# manière que vous le feriez pour une clé SSH privée.
#
# Contrairement aux fichiers de configuration boto et AWS, cette section ne prend pas en charge
# les profils.
#
# aws_access_key_id = AXXXXXXXXXXXXXX
# aws_secret_access_key = XXXXXXXXXXXXXXXXXXX
# aws_security_token = XXXXXXXXXXXXXXXXXXXXXXXXXXXX
